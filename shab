#!/bin/bash

#==============================================================================
# This is a simple maker for Shoggoth project
# 2023.01.30
#
# Authors
#   still@itserv.ru
#   igorptx@gmail.com
#
# commands
#   header [text for output]
#   install apt [packeges list]
#   execute [shell commands]
#   build [path/file.cpp]


#==============================================================================
# Constants

# Colors
COLOR_DEFAULT="\033[0m"
COLOR_RED="\033[0;31m"
COLOR_GREEN="\033[0;32m"
COLOR_GOLD="\033[0;33m"



# Shab folder
Shab="./.shab"



# Error file
Error="$Shab/err"



# Cache path define
CachePath="$Shab/cache"



# Object file path define
ObjPath="$Shab/obj"



# Compiler

Compiler="g++"



# Compiler
CPP="$Compiler -fmax-errors=1 -O3 -c SOURCE_FILE -o $ObjPath/OBJECT_FILE"




#==============================================================================
# Functions


# Set error flag-file
function error {
    touch $Error
}



# Output information about file change
function info {
    if [ $2 = "CHANGE" ]
    then
        echo -e "File $COLOR_GOLD$1$COLOR_DEFAULT was changed"
    fi
    if [ $2 = "NO_CHANGE" ]
    then
        echo -e "File $COLOR_GREEN$1$COLOR_DEFAULT was not changed"
    fi
}


# Check control summ at md5
function checkControlSumm {
    if [ -f $1 ]
    then
        FileName=`basename $1`
        CacheFile=$CachePath/$FileName

        CurrentCache=`md5sum $1 | awk '{ print $1 }'`

        # get last cache
        if [ -f $CacheFile ]
        then
            LastCache=`cat $CacheFile`
        else
            LastCache="NO_CACHE"
        fi

        if [ "$LastCache" != "$CurrentCache" ]
        then
            echo "CHANGE"
        else
            echo "NO_CHANGE"
        fi
    else
        echo "NO_CHANGE"
    fi
}


# Store control sum to file
function storeControlSumm {
    # Get cache file name
    FileName=`basename $1`
    CacheFile=$CachePath/$FileName

    # GetCurrent cache
    CurrentCache=`md5sum $1 | awk '{ print $1 }'`

    echo $CurrentCache > $CacheFile
}



function remove_include {
    File=$1
    for File in $List
    do
        echo ======================== $File $( checkControlSumm $File )
        a=`cat $File | grep -E '#include \".+\"'`
        for Item in ${a[0]}
        do
           if [ $Item != "#include" ]
           then
                Lib=`echo "${Item//[\"]/}"`
           fi
        done
    done
}



# Compile one cpp file
function compile_file {
    FileNameSource=$1
    FileNameHeader=${FileNameSource/.cpp/.h}
    RebuildSource=$( checkControlSumm $FileNameSource )
    RebuildHeader=$( checkControlSumm $FileNameHeader )

    info $FileNameSource $RebuildSource
    info $FileNameHeader $RebuildHeader

    if [[ $RebuildSource = "CHANGE" || $RebuildHeader = "CHANGE" ]]
    then
        FileName=`basename $1`
        Exec=${CPP/SOURCE_FILE/$1}
        ObjFile=${FileName/.cpp/.o}
        Exec=${Exec/OBJECT_FILE/$ObjFile}
        echo -e "Run compiler:"$COLOR_GREEN $Exec $COLOR_DEFAULT
        $Exec
        if [ $? -eq 0 ]
        then
            storeControlSumm $FileNameSource
            storeControlSumm $FileNameHeader
            echo -e $COLOR_GREEN"ok"$COLOR_DEFAULT
        else
            error
        fi
    fi
}



# Compile path
function build {
    List=`ls $1`

    for File in $List
    do
        [ ! -f "$Error" ] && compile_file $File
    done
}



# Header output
function header {
    echo -e $COLOR_GREEN=================================================================
    echo -e $1
    echo -e =================================================================$COLOR_DEFAULT
}


function install {
    header "install $2"
    case $1 in
        "apt")
            sudo apt install -y $2
        ;;
    esac
}



# Begin build
function begin {
    if [ -f $Error ]
    then
        rm $Error
    fi
}



# Remove bash folder
function rebuild {
    rm -rf $Shab
}



#==============================================================================
# Main

# Create cache path for md5
if [ ! -d $CachePath ]
then
    mkdir $CachePath
fi



# Create obj path
if [ ! -d $ObjPath ]
then
    mkdir $ObjPath
fi



# Create shab path
if [ ! -d $Shab ]
then
    mkdir $Shab
fi



# Commands execute
case $1 in
    "rebuild")
        rebuild
    ;;
    "begin")
        begin
    ;;
    "header")
        [ ! -f "$Error" ] && header "$2"
    ;;
    "build")
        build "$2"
    ;;
    "install")
        install "$2" "$3"
    ;;
    "execute")
        if [ ! -f "$Error" ]
        then
            Line=$2
            Line=${Line/OBJECT_PATH/$ObjPath}
            Line=${Line/COMPILER/$Compiler}
            echo -e "$COLOR_GOLD$Line$COLOR_DEFAULT"
            $Line
            if [ ! $? -eq 0 ]
            then
                error
            fi
        fi
    ;;
    *)
        echo -e "Unknown command $COLOR_RED\"$1\"$COLOR_DEFAULT at first parameter"
        echo -e "You can use:"
        echo -e "  $COLOR_GREEN begin$COLOR_DEFAULT it can be first command at make file. example:$COLOR_GOLD ./shab begin$COLOR_DEFAULT"
        echo -e "  $COLOR_GREEN header$COLOR_DEFAULT for header output. example:$COLOR_GOLD ./shab header Hello$COLOR_DEFAULT"
        echo -e "  $COLOR_GREEN build$COLOR_DEFAULT for cpp files. example:$COLOR_GOLD ./shab build hello.cpp$COLOR_DEFAULT"
        echo -e "  $COLOR_GREEN execute$COLOR_DEFAULT execute bash command. example:$COLOR_GOLD ./shab execute ls$COLOR_DEFAULT"
        echo -e "  $COLOR_GREEN rebuild$COLOR_DEFAULT remove the shab folder and full rebuilding project. example:$COLOR_GOLD ./shab rebuild$COLOR_DEFAULT"
        error
    ;;
esac
